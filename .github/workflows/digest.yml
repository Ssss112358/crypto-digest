name: crypto-digest
on:
  schedule: [{ cron: "0 */6 * * *" }]
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/digest.yml"
      - "requirements.txt"
concurrency:
  group: crypto-digest
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (internal)
        env:
          TOKEN: ${{ github.token }}
        run: |
          set -euxo pipefail
          rm -rf repo
          git clone --depth=1 "https://x-access-token:${TOKEN}@github.com/${{ github.repository }}.git" repo
          cd repo
          git rev-parse --abbrev-ref HEAD
          echo "WORKDIR=$PWD" >> $GITHUB_ENV
          ls -la


      - name: Python setup
        run: |
          set -euxo pipefail
          python3 --version
          python3 -m pip install --upgrade pip

      - name: Show commit & requirements (diagnostic)
        run: |
          set -euxo pipefail
          cd "$WORKDIR"
          echo "HEAD = $(git rev-parse HEAD)"
          echo "Branch = $(git rev-parse --abbrev-ref HEAD)"
          git log -1 --oneline --decorate
          echo "---- requirements.txt (print with line numbers) ----"
          nl -ba requirements.txt
          echo "---- requirements.txt (hexdump) ----"
          hexdump -C requirements.txt | sed -n '1,60p'

      - name: Install deps (with sanitize)
        run: |
          set -euxo pipefail
          cd "$WORKDIR"

          python3 - <<'PY'
          from pathlib import Path
          from unicodedata import normalize

          path = Path('requirements.txt')
          raw_lines = path.read_text(encoding='utf-8', errors='ignore').splitlines()
          clean = []
          for line in raw_lines:
              s = normalize('NFKC', line).strip()
              if not s or s.startswith('#'):
                  continue
              s = s.replace('﻿', '').replace(' ', ' ').strip()
              if s.lower().startswith('nrequests=='):
                  _, _, version = s.partition('==')
                  s = 'requests==' + (version or '2.32.3')
              clean.append(s)
          path.write_text('
'.join(clean) + '
', encoding='utf-8')
          print('SANITIZED requirements:')
          for idx, line in enumerate(clean, 1):
              print(f"{idx:02d}: {line}")
          PY
          if grep -i -n 'nrequests' "$WORKDIR/requirements.txt"; then
            echo "::error::requirements.txt still contains 'nrequests'"; exit 1
          fi
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Mask secrets
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          TG_STRING_SESSION:   ${{ secrets.TG_STRING_SESSION }}
        run: |
          echo "::add-mask::$DISCORD_WEBHOOK_URL"
          echo "::add-mask::$TG_STRING_SESSION"

      - name: Run digest job
        env:
          TG_API_ID:           ${{ secrets.TG_API_ID }}
          TG_API_HASH:         ${{ secrets.TG_API_HASH }}
          TG_STRING_SESSION:   ${{ secrets.TG_STRING_SESSION }}
          SOURCE_CHATS:        "kudasai_jp"
          GOOGLE_API_KEY:      ${{ secrets.GOOGLE_API_KEY }}
          GEMINI_MODEL:        "models/gemini-2.0-flash"
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          HOURS_24: "24"
          HOURS_RECENT: "6"
          QUIET_LOG: "0"
          DISCORD_POST_MODE: "markdown"
          DRY_RUN: "0"
        run: |
          set -euxo pipefail
          cd "$WORKDIR"
          python3 - <<'PY'
          import os, traceback, sys
          print("Start run_digest_job.py")
          try:
              import scripts.run_digest_job as job
              job.main()
              print("Job finished")
          except Exception as e:
              print("ERROR:", type(e).__name__, str(e)[:500])
              print("TRACE:")
              traceback.print_exc()
              sys.exit(1)
          PY
